import{a as t,r as e,F as i}from"./run.54c795c4.js";import{a as s,E as n}from"./editor.worker.d2c322af.js";import{T as r}from"./WorkerTask.2f740b47.js";class a{constructor(t){this.fs=t}reset(){this.store={}}async setup(){let t=[];try{t=(await this.fs.readFile("bridge/.lightningCache").then((t=>t.text()))).split("\n")}catch{}this.store={};let e="unknown";for(const i of t){if(""===i)continue;if("#"===i[0]){e=i.slice(1),this.store[e]={};continue}const[t,s,n]=i.split("|");this.store[e][t]={lastModified:Number(s),data:n?JSON.parse(n):void 0}}}async saveStore(){let t="";for(const e in this.store){t+=`#${e}\n`;for(const i in this.store[e]){const s=this.store[e][i];t+=`${i}|${s.lastModified}`,s.data?t+=`|${JSON.stringify(s.data)}\n`:t+="\n"}}await this.fs.mkdir("bridge"),await this.fs.writeFile("bridge/.lightningCache",t)}add(e,{lastModified:i,data:s},n=t.getId(e)){this.store[n]||(this.store[n]={}),this.store[n][e]={lastModified:i,data:s??this.store[n]?.[e]?.data}}getLastModified(e,i=t.getId(e)){return this.store[i]?.[e]?.lastModified}find(t,e,i,s=!1){if(0===i.length)return[];const n=this.store[t],r=[];for(const a in n){if((n[a].data?.[e]??[]).find((t=>i.includes(t)))){if(!s)return[a];r.push(a)}}return r}findMultiple(t,e,i,s=!1){const n=[];for(const r of t){const t=this.find(r,e,i,s);if(t.length>0&&!s)return t;n.push(...t)}return n}async forEach(t,e){const i=this.store[t],s=[];for(const n in i)s.push(e(n,i[n]));await Promise.all(s)}get(e,i=t.getId(e)){return this.store[i]?.[e]??{}}allFiles(){const t=[];for(const e in this.store)for(const i in this.store[e])t.push(i);return t}getAllFrom(t,e){const i={};for(const s in this.store[t]??{}){if(e&&e!==s)continue;const n=(this.store[t][s]??{}).data??{};for(const t in n)i[t]?i[t].push(...n[t]):i[t]=[...n[t]]}return i}async getSchemasFor(t,e){const i=await this.getAllFrom(t,e),s=`file:///data/packages/schema/${t}/dynamic`,n=[];for(const r in i)n.push({uri:`${s}/${e?"currentContext/":""}${r}Enum.json`,schema:{type:"string",enum:i[r]}}),n.push({uri:`${s}/${e?"currentContext/":""}${r}Property.json`,schema:{properties:Object.fromEntries(i[r].map((t=>[t,{}])))}});return n}getCacheDataFor(t,e,i){const s=this.getAllFrom(t,e);return i?s[i]:s}}function o(t,e,i){return c(0===t.length||"/"===t?[]:t.split("/"),e,i)}function c(t,e,i){if(void 0===e)return;if(0===t.length)return i(e);if("object"!=typeof e)return;const s=t.shift();if(s.startsWith("*")){let n;s.length>=1&&(n=new RegExp(s.match(/(\*{)(.+)(})/)?.[2]??".*"));for(const s in e)n&&null!==s.match(n)&&c([...t],e[s],i)}else c(t,e[s],i)}class h{constructor(t,e){this.packIndexer=t,this.lightningStore=e,this.packSpiderFiles={}}async setup(e){if(this.packIndexer.getOptions().disablePackSpider)return;d={};(await t.getPackSpiderData()).forEach((({id:t,packSpider:e})=>this.packSpiderFiles[t]=e));for(const t of e)await f.create(t,this),this.packIndexer.progress.addToCurrent()}async updateFile(t){await f.create(t,this,!0)}}let d={};function l(t){const e=[];for(const i in d[t]??{}){const s=d[t][i];if(!s?.isFeatureFolder)continue;const n=s.toDirectory();1===n.length?e.push(...n.map((t=>({...t,displayName:t.identifierName})))):e.push({kind:"directory",displayName:s.identifierName,name:s.filePath,path:[t,s.filePath]})}return e}class f{constructor(t,e=[]){this.filePath=t,this.parents=new Set,e.forEach((t=>this.addParent(t))),this._connectedFiles=new Set}get connectedFiles(){return this._connectedFiles}static async create(e,i,s=!1){const n=t.getId(e),r=d[n]?.[e];if(void 0!==r){if(!s)return r;r.connectedFiles.forEach((t=>t.removeParent(r)))}const a=e.split("/").shift(),c=i.packSpiderFiles[n]??{},{data:h={}}=i.lightningStore.get(e,n),l=[],g=c.includeFiles?.map((t=>{if(t)return h[t]??[]})).flat()??[];for(const t of g)`${a}/${t}`!==e&&l.push(`${a}/${t}`);for(let{find:t,where:o,matches:d,shouldFindMultiple:f}of c.connect??[]){Array.isArray(t)||(t=[t]);const s=h[d]??[],n=i.lightningStore.findMultiple(t,o,s,f??!0);for(const t of n)t!==e&&l.push(t)}for(const t of c.sharedFiles??[])t!==e&&l.push(t);for(const{from:t,take:d,prefix:f="",suffix:p=""}of c.includeFromFiles??[]){o(d.map((t=>{if(!t.startsWith("@"))return t;const e=h[t.slice(1)];return e?1===e.length?e[0]:`*{${e.join("|")}}`:"undefined"})).join("/"),await i.packIndexer.fileSystem.readJSON(t),(t=>{Array.isArray(t)?l.push(...t.map((t=>`${f}${t}${p}`))):"string"==typeof t&&l.push(`${f}${t}${p}`)}))}const u=new f(e,s?[...r?.parents??[]]:void 0);return await u.addConnectedFiles(l,i),u.setIdentifier(h.identifier),d[n]||(d[n]={}),d[n][e]=u,d[n][e]}async addConnectedFiles(t,e){for(const i of t){const t=await f.create(i,e);this.connectedFiles.add(t),t.addParent(this)}}toDirectory(){const t=[],e=this.deepConnectedFiles;return e.add(this),e.forEach((e=>t.push({kind:"file",name:e.fileName,filePath:e.filePath,identifierName:e.identifierName,displayName:e.identifierName}))),t}get deepConnectedFiles(){const t=new Set;return this.connectedFiles.forEach((e=>{t.add(e),e.deepConnectedFiles.forEach((e=>t.add(e)))})),t}get identifierName(){return this.identifier}get fileName(){const t=this.filePath.split("/");return t[t.length-1]}get isFeatureFolder(){return 0===this.parents.size}addParent(t){this.parents.add(t)}removeParent(t){this.parents.delete(t)}setIdentifier(t){if("string"==typeof t&&(this.identifier=t),1===t?.length)return void(this.identifier=t[0]);const e=this.filePath.split("/");e.length<=2?this.identifier=this.fileName:(e.shift(),e.shift(),this.identifier=e.join("/"))}}class g{constructor(t,e){this.service=t,this.lightningStore=e,this.folderIgnoreList=new Set,this.fileIgnoreList=new Set([".DS_Store"]),this.totalTime=0}async loadIgnoreFolders(){try{const t=await this.service.fileSystem.readFile("bridge/.ignore-folders");(await t.text()).split("\n").concat(["bridge","builds"]).forEach((t=>this.folderIgnoreList.add(t)))}catch{["bridge","builds"].forEach((t=>this.folderIgnoreList.add(t)))}}async start(){if(await this.lightningStore.setup(),0===this.folderIgnoreList.size&&await this.loadIgnoreFolders(),this.service.getOptions().noFullLightningCacheRefresh){const t=this.lightningStore.allFiles();if(t.length>0)return[t,[]]}let t=!1;const e=[],i=[];return await this.iterateDir(this.service.fileSystem.baseDirectory,(async(s,n)=>{await this.processFile(n,s)&&(t||(t=!0),i.push(n)),e.push(n),this.service.progress.addToCurrent()})),t&&await this.lightningStore.saveStore(),[e,i]}async iterateDir(t,e,i=""){for await(const[s,n]of t.entries()){const t=0===i.length?s:`${i}/${s}`;if("directory"===n.kind){if(this.folderIgnoreList.has(t))continue;await this.iterateDir(n,e,t)}else this.fileIgnoreList.has(s)||(this.service.progress.addToTotal(2),await e(n,t))}}async processFile(e,i){const s=await i.getFile(),n=t.getId(e);return s.lastModified!==this.lightningStore.getLastModified(e,n)&&(e.endsWith(".json")?await this.processJSON(e,n,s):e.endsWith(".mcfunction")?await this.processFunction(e,n,s):await this.lightningStore.add(e,{lastModified:s.lastModified},n),!0)}async processFunction(t,e,i){const s=await i.text(),n=[];for(const r of s.split("\n")){let t=/function\s+([aA-zZ0-9\/]+)/g.exec(r);t&&n.push(`functions/${t[1]}.mcfunction`)}return await this.lightningStore.add(t,{lastModified:i.lastModified,data:{functionPath:n}},e),!0}async processJSON(i,n,r){const a=await r.text();let c;try{c=s.parse(a)}catch{return this.lightningStore.add(i,{lastModified:r.lastModified},n),!0}const h=await t.getLightningCache(i);if(0===h.length)return this.lightningStore.add(i,{lastModified:r.lastModified},n),!0;const d={},l=(t,i,s)=>n=>{let r;r=Array.isArray(n)?n:"object"==typeof n?Object.keys(n??{}):[n],i&&(r=r.filter((t=>!i.includes(t)))),s&&(r=r.map((t=>e(s,{value:t}))).filter((t=>void 0!==t))),d[t]?d[t]=[...new Set(d[t].concat(r))]:d[t]=r};for(const t of h){const e=Object.keys(t).find((t=>!t.startsWith("@")));if(!e)continue;const i=t[e];if(Array.isArray(i))for(const s of i)o(s,c,l(e,t["@filter"],t["@map"]));else o(i,c,l(e,t["@filter"],t["@map"]))}return this.lightningStore.add(i,{lastModified:r.lastModified,data:Object.keys(d).length>0?d:void 0},n),!0}}async function u(e,i){let s;try{s=await i.readdir(e,{withFileTypes:!0})}catch{return[]}return s.map((i=>{const s=t.getId(`${e}/${i.name}/test.json`);return{kind:i.kind,displayName:"file"===i.kind||"unknown"===s?i.name:void 0,name:"directory"===i.kind&&"unknown"!==s?s:i.name,path:`${e}/${i.name}`}}))}n(class extends r{constructor(t){super("packIndexer",t.projectDirectory),this.options=t,this.lightningStore=new a(this.fileSystem),this.packSpider=new h(this,this.lightningStore),this.lightningCache=new g(this,this.lightningStore)}getOptions(){return this.options}async onStart(){console.time("[WORKER] SETUP"),this.lightningStore.reset(),await t.setup(new i(this.options.baseDirectory)),console.timeEnd("[WORKER] SETUP"),console.time("[WORKER] LightningCache");const[e,s]=await this.lightningCache.start();return console.timeEnd("[WORKER] LightningCache"),console.time("[WORKER] PackSpider"),await this.packSpider.setup(e),console.timeEnd("[WORKER] PackSpider"),s}async updateFile(t){await this.lightningCache.processFile(t,await this.fileSystem.getFileHandle(t)),await this.lightningStore.saveStore(),await this.packSpider.updateFile(t)}async readdir(t){return this.options.disablePackSpider?t.length>0?(await this.fileSystem.readdir(t.join("/"),{withFileTypes:!0})).map((e=>({kind:e.kind,name:e.name,path:t.concat([e.name])}))):(await Promise.all([u("BP",this.fileSystem),u("RP",this.fileSystem),u("SP",this.fileSystem)])).flat():0===t.length?function(){const t=[];for(const e in d)l(e).length>0&&t.push({kind:"directory",name:e});return t}():1===t.length?l(t[0]):d[t[0]][t[1]].toDirectory()}find(t,e,i,s=!1){return this.lightningStore.find(t,e,i,s)}findMultiple(t,e,i,s=!1){return this.lightningStore.findMultiple(t,e,i,s)}getAllFiles(t=!1){return t?this.lightningStore.allFiles().sort(((t,e)=>t.localeCompare(e))):this.lightningStore.allFiles()}getSchemasFor(t,e){return this.lightningStore.getSchemasFor(t,e)}getCacheDataFor(t,e,i){return this.lightningStore.getCacheDataFor(t,e,i)}},self);
