import{m as e,a as t}from"./editor.worker.d2c322af.js";class i{constructor(){this.listeners=new Set}dispatch(e){this.listeners.forEach((t=>t(e)))}on(e,t=!0){if(this.listeners.add(e),t)return{dispose:()=>{this.off(e)}}}off(e){this.listeners.delete(e)}once(e){const t=i=>{e(i),this.off(t)};this.on(t)}}class r extends i{constructor(e=1){super(),this.needsToFireAmount=e,this.firedTimes=0}get fired(){return new Promise((e=>this.once(e)))}get hasFired(){return this.firedTimes>=this.needsToFireAmount}resetSignal(){this.data=void 0,this.firedTimes=0}dispatch(e){if(this.firedTimes<this.needsToFireAmount&&this.firedTimes++,this.data=e,this.hasFired)return super.dispatch(e)}on(e){return this.hasFired&&e(this.data),super.on(e)}}var a;!function(t){let i,r=[];function a(t,i){for(const a of r){if(i===a.id)return a;if(t)if(a.scope){if("string"==typeof a.scope){if(t.startsWith(a.scope))return a}else if(a.scope.some((e=>t.startsWith(e))))return a}else{if("string"==typeof a.matcher&&e(t,a.matcher))return a;for(const i of a.matcher)if(e(t,i))return a}}}t.setup=async function(e){if(r.length>0)return;i=e;const t="data/packages/fileDefinition",a=await e.readdir(t,{withFileTypes:!0});for(const i of a)"file"===i.kind&&r.push(await e.readJSON(`${t}/${i.name}`))},t.get=a,t.getIds=function(){const e=[];for(const t of r)e.push(t.id);return e},t.getId=function(e){return a(e)?.id??"unknown"},t.getMonacoSchemaArray=function(){return r.map((({matcher:e,schema:t})=>({fileMatch:Array.isArray(e)?[...e]:[e],uri:t}))).flat()};const s={};t.getLightningCache=async function(e){const{lightningCache:t}=a(e)??{};return t?(s[t]||(s[t]=await i.readJSON(`data/packages/lightningCache/${t}`)),s[t]):[]},t.getPackSpiderData=async function(){return await Promise.all(r.map((({id:e,packSpider:t})=>{if(t)return i.readJSON(`data/packages/packSpider/${t}`).then((t=>({id:e,packSpider:t})))})).filter((e=>void 0!==e)))}}(a||(a={}));class s extends r{get baseDirectory(){return this._baseDirectory}constructor(e){super(),e&&this.setup(e)}setup(e){this._baseDirectory=e,this.dispatch()}async getDirectoryHandle(e,{create:t,createOnce:i}={}){if(""===e)return this.baseDirectory;let r=this.baseDirectory;const a=e.split(/\\|\//g);for(const s of a)r=await r.getDirectoryHandle(s,{create:i||t}),i&&(i=!1,t=!1);return r}async getFileHandle(e,t=!1){if(0===e.length)throw new Error("Error: filePath is empty");const i=e.split(/\\|\//g),r=i.pop(),a=await this.getDirectoryHandle(i.join("/"),{create:t});return await a.getFileHandle(r,{create:t})}async mkdir(e,{recursive:t}={}){await this.getDirectoryHandle(e,{create:!0})}async readdir(e,{withFileTypes:t}={}){const i=await this.getDirectoryHandle(e),r=[];for await(const a of i.values())"file"===a.kind&&".DS_Store"===a.name||(t?r.push(a):r.push(a.name));return r}async readFilesFromDir(e,t=this.getDirectoryHandle(e)){t=await t;const i=[];for await(const r of t.values())"file"===r.kind&&".DS_Store"===r.name||("file"===r.kind?i.push({name:r.name,kind:r.kind,path:`${e}/${r.name}`}):"directory"===r.kind&&i.push(...await this.readFilesFromDir(`${e}/${r.name}`,r)));return i}readFile(e){return this.getFileHandle(e).then((e=>e.getFile()))}async unlink(e){if(0===e.length)throw new Error("Error: filePath is empty");const t=e.split(/\\|\//g),i=t.pop(),r=await this.getDirectoryHandle(t.join("/"));await r.removeEntry(i,{recursive:!0})}async writeFile(e,t){const i=await this.getFileHandle(e,!0),r=await i.createWritable();await r.write(t),r.close()}async readJSON(e){const i=await this.readFile(e);try{return await t.parse(await i.text())}catch{throw new Error(`Invalid JSON: ${e}`)}}writeJSON(e,t,i=!1){return this.writeFile(e,JSON.stringify(t,null,i?"\t":void 0))}async copyFile(e,t){const i=await this.getFileHandle(e,!1),r=await this.getFileHandle(t,!0),a=await r.createWritable();await a.write(await i.getFile()),await a.close()}}function n(e,t,i=["Bridge"]){return new Function(...i,`return (async () => {\n${e}\n})()`)(...Array.isArray(t)?t:[t])}function o(e,t,i=["Bridge"]){return new Function(...i,e)(...Array.isArray(t)?t:[t])}export{i as E,s as F,r as S,a,n as b,o as r};
