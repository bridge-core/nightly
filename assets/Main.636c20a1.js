import{E as t}from"./editor.worker.d2c322af.js";import{T as i}from"./WorkerTask.2f740b47.js";import{b as s,a as e,F as a}from"./run.54c795c4.js";import{E as o,d as n}from"./path.c1e5c099.js";const r={BP:"development_behavior_packs",RP:"development_resource_packs",SP:"skin_packs"};let l=!1;const h={async transformPath(t,i){i.buildName||(i.buildName="dev"===i.mode?"dev":"dist"),"build"!==i.mode||l||(l=!0,await t.rmdir(`builds/${i.buildName}`));const s=t.filePath.split("/"),e=s.shift();i.packName||(i.packName="bridge "+e),r[e]&&(t.filePath=`builds/${i.buildName}/${r[e]}/${i.packName}/${s.join("/")}`)}},f=["createFiles","collect","beforeTransform","transform","afterTransform","transformPath","finalizeBuild","cleanup"];async function c(t,i){const e=new Map;e.set("comMojangRewrite",h);for(const[o,n]of Object.entries(i??{})){let i;try{i=await t.readFile(n)}catch(a){continue}const r={};await s(await i.text(),[void 0,r],["require","module"]),e.set(o,r?.exports??{})}return e}class u{constructor(t,i,s,a){this.parent=t,this.fs=i,this.filePath=s,this.fileHandle=a,this.files=[],this.hooks=new o(f),this.fileType=s?e.getId(s):"unknown",this._originalFilePath=s}async create(t){const i=new u(this.parent,this.fs,t,await this.fs.getFileHandle(t,!0));return this.files.push(i),i}async runHook(t,i,s){this.hooks.dispatch(s),await this.runHookFrom("*",t,i,s),await this.runHookFrom(this.fileType,t,i,s);for(const e of this.files)await e.runHook(t,i,s);"finalizeBuild"===s&&await this.save(),"finalizeBuild"===s&&this.cleanup()}async runHookFrom(t,i,s,e){if(i[t])for(let a of i[t]){let i={};Array.isArray(a)&&([a,i]=a),i.mode=this.parent.getOptions().mode;let o=s.get(a);o||"*"===t||(o=s.get("#default")),await(o?.[e]?.(this,i))}}async save(){if(null!==this.data&&this._originalFilePath!==this.filePath)if(this.data)await this.fs.mkdir(n(this.filePath),{recursive:!0}).then((()=>this.fs.writeFile(this.filePath,this.data)));else{const t=await this.fs.getFileHandle(this.filePath,!0),i=await t.createWritable();await i.write(await this.fileHandle.getFile()),await i.close()}}cleanup(){this.data=void 0,this.filePath=this._originalFilePath}rmdir(t){return this.fs.unlink(t)}}t(class extends i{constructor(t){super("compiler",t.projectDirectory),this.options=t,this.files=new Map}getOptions(){return this.options}async onStart(t){const i=new a(this.options.baseDirectory);await e.setup(i);try{this.buildConfig=await this.fileSystem.readJSON(`bridge/compiler/${this.options.config}`)}catch{return}this.plugins=await c(i,this.options.plugins);for(const s of t)this.files.set(s,new u(this,this.fileSystem,s,await this.fileSystem.getFileHandle(s)));this.progress.setTotal(f.length*this.files.size);for(const s of f)console.time(`[COMPILER] Running hook "${s}"`),await this.runHook(this.files,s),console.timeEnd(`[COMPILER] Running hook "${s}"`)}async updatePlugins(t){const i=new a(this.options.baseDirectory);this.plugins=await c(i,t)}async runHook(t,i){for(const[s,e]of t)await e.runHook(this.buildConfig.plugins,this.plugins,i),this.progress.addToCurrent()}async updateFile(t){let i=this.files.get(t);i||(i=new u(this,this.fileSystem,t,await this.fileSystem.getFileHandle(t)),this.files.set(t,i));for(const s of f)await i.runHook(this.buildConfig.plugins,this.plugins,s)}updateMode(t){this.options.mode=t}},self);
