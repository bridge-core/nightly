import{E as t,F as s}from"./run.54c795c4.js";class r{constructor(t,s,r,e){this.taskService=t,this.current=s,this.total=r,this.prevTotal=e}addToCurrent(t){this.current+=t??1,this.taskService.dispatch([this.getCurrent(),this.getTotal()])}addToTotal(t){this.total+=t??1,this.taskService.dispatch([this.getCurrent(),this.getTotal()])}getTotal(){return this.total>this.prevTotal?this.total:this.prevTotal}getCurrent(){return this.current}setTotal(t){this.total=t}}class e extends t{constructor(t,r){super(),this.taskId=t,this.lastDispatch=0,this.fileSystem=new s(r)}async loadPreviousTaskRun(){try{const t=await this.fileSystem.readFile(`bridge/tasks/${this.taskId}.txt`),s=Number(await t.text());return Number.isNaN(s)?100:s}catch{return 100}}async saveCurrentTaskRun(){await this.fileSystem.writeFile(`bridge/tasks/${this.taskId}.txt`,`${this.progress.getCurrent()}`)}async start(t){this.progress=new r(this,0,0,await this.loadPreviousTaskRun());const s=await this.onStart(t);return this.saveCurrentTaskRun(),this.dispatch([this.progress.getCurrent(),this.progress.getCurrent()]),s}dispatch(t){t[0]===t[1]&&super.dispatch(t),this.lastDispatch+200>Date.now()||(super.dispatch(t),this.lastDispatch=Date.now())}}export{e as T};
